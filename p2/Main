import re

def accNumDecOnly(string):
    restricted = re.compile(r'[^0-9]')
    string = restricted.search(string)
    return not bool(string)

#check if account num is valid
def accNumValid(accNum):
        if len(accNum) == 7:
            print("7")
            if accNum[0] != "0":
                print("8")
                if accNumDecOnly(accNum) == True:
                    print("9")
                    return 1
                else:
                    errorMsg("Account number must be decimals only")
                    return 0
            else:
                errorMsg("Accout number must not begin with a 0")
                return 0
        else:
            errorMsg("Account number must be 7 decimals long")
            return 0


def accNumExists(accNum):
    exists = 0
    for x in vaf:
        if str(accNum) == x.strip():
            exists = 1
            break
    return exists

def getAccBalance(accNum):
    #pseudo - backend doesn't exist yet
    amount = 10000 #temp to allow testing
    for i in range (0, len(backend)):
        if backend[i].num == accNum:
            amount = backend[i].amount
            daily = backend[i].dailyAmount
            break
    return amount, dailyAmount


def accNameAlphaNum(string):
    restricted = re.compile(r'[^a-zA-Z0-9]')
    string = restricted.search(string)
    return not bool(string)


def accNameValid(accName):
    if len(accName) >= 3 and len(accName) <= 30:
        print("10")
        if accName[0] != " " or accName[-1] != " ":
            print("11")
            if accNameAlphaNum(accName) == True:
                return 1
            else:
                errorMsg("Alphanumeric characters only for account name")
                return 0
        else:
            errorMsg("Account name cannot start or end with a space/blank character")
            return 0
    else:
        errorMsg("Account name should be 3-30 alphanumeric characters long")
        return 0


def invalidInputA():
    print("Invalid input")


def invalidInputB(inputAction):
    print("Invalid input: " + inputAction)


def errorMsg(error):
    print(error)


def handleKeyboardInput():
    action = input("Enter command: ")
    valid = actionHandler(action)
    if valid == 0:
        invalidInputB(action)


def login():
    global status
    status = "login"
    print("Status: " + status)
    #Read the valid accounts file -> replace demofile.txt with valid accounts file
    global vaf
    vaf = open("vaf.txt", "r")
    # Loops through the file and reads every line (useful for reading accounts)
    #for x in vaf:
    #    print(x)


def logout():
    global status
    status = "logout"
    print("Status: " + status)
    vaf.close()
    tsf = open("tsf.txt", "a")  # Using "a" will append, "w" will overwrite
    tsf.write("DEL " + accNum + " " + "000" + " " + "0000000" + " " + accName) # end the tsf with an EOS transaction code (append to end)
    # Print TSF
    for line in tsf:
        print(line)
    # Close TSF
    tsf.close()


def setatm():
    global status
    status = "atm"
    print("Status: " + status)


def setagent():
    global status
    status = "agent"
    print("Status: " + status)


def createAccount(action):
    inputCommand = action.split(" ", 2);
    #Make sure length is 3 to avoid crashes
    if len(inputCommand) == 3:
        accNum = inputCommand[1]
        accName = inputCommand[2]
        if accNumValid(accNum) == 1:
            if accNumExists(accNum) == 0:
                if accNameValid(accName) == 1:
                    print("12")
                    vaf1 = open("vaf.txt", "r")  # "a" will append, "w" will overwrite
                    lines = vaf1.readlines()
                    vaf1.close()
                    vaf1 = open("vaf.txt", "w")
                    for line in lines:
                        if line.strip("\n") != "0000000":
                            vaf1.write(line)
                    vaf1.close()
                    vaf1 = open("vaf.txt", "a")
                    vaf1.write(accNum)
                    vaf1.write("\n" + "0000000")
                    vaf1.close()
                    # Save to tsf file
                    tsf1 = open("tsf.txt", "a")  # append info to end of TSF
                    tsf1.write("NEW " + accNum + " " + "000" + " " + "0000000" + " " + accName)
                    tsf1.close()
                    print("Account " + accNum + " created successfully.")
                    return 1
                else:
                    return 0
            else:
                errorMsg("Account number exists")
                return 0
        else:
            return 0
    else:
        errorMsg("Not enough arguments. Please follow the format: createAccount 1234567 AccountName")
        return 0


# Note about delete - If you created a new account, you cannot delete it within the same session
# I, personally, thought this was a bug but in the requirements it says 'no transactions on this new account should be accepted this session'
# So, you know what, pretty good, close enough
# But if you wanted to know the reason, it's because login() opens the vaf.txt file and stores it in a variable vaf
# When you do createAccount(), it updates the vaf.txt file with the new account number, BUT the contents of the variable vaf is still the old vaf.txt
# So even though vaf.txt is new, vaf the variable still contains the old account numbers

def deleteAccount(action):
    inputCommand = action.split(" ", 2);
    # Make sure length is 3 to avoid crashes
    if len(inputCommand) == 3:
        accNum = inputCommand[1]
        accName = inputCommand[2]
        if accNumValid(accNum) == 1:
            if accNumExists(accNum) == 1:
                if accNameValid(accName) == 1:
                    print("12")
                    # delete the account successfully
                    vaf1 = open("vaf.txt", "r")  # "a" will append, "w" will overwrite
                    lines = vaf1.readlines()
                    vaf1.close()
                    vaf1 = open("vaf.txt", "w")
                    for line in lines:
                        if line.strip("\n") != str(accNum):
                            vaf1.write(line)
                    vaf1.close()
                    # Save to tsf file
                    tsf1 = open("tsf.txt", "a") #append info to end of TSF
                    tsf1.write("DEL " + accNum + " " + "000" + " " + "0000000" + " " + accName)
                    tsf1.close()
                    print("Account " + accNum + " deleted successfully.")
                    return 1
                else:
                    return 0
            else:
                errorMsg("Account number does not exist")
                return 0
        else:
            return 0
    else:
        errorMsg("Not enough arguments. Please follow the format: deleteAccount 1234567 AccountName")
        return 0


def deposit(action):
    print("Deposit")
    global status
    if status == "atm":
        limit = 200000 #from assignment requirements
    elif status == "agent":
        limit = 99999999 #from assignment requirements
    else:
        return 0
    inputCommand = action.split(" ", 2);
    # Make sure length is 3 to avoid crashes
    if len(inputCommand) == 3:
        accNum = inputCommand[1]
        amount = inputCommand[2]
        if accNumValid(accNum) == 1:
            if accNumExists(accNum) == 1:
                if accNumDecOnly(amount) == True:
                    if len(amount) > 3 and len(amount) < 8:
                        if int(amount) <= limit:
                            try:
                                tsf1 = open("tsf.txt", "a")
                                tsf1.write("DEP " + accNum + " " + amount + " " + "0000000" + " " + "***")
                                tsf1.close()
                                #WILL NEED TO WRITE TO BACKEND HERE IN NEXT PART
                            except:
                                errorMsg("Something went wrong opening the tsf.txt")
                                return 0
                        else:
                            errorMsg("Amount exceeds the deposit limit")
                            return 0
                    else:
                        errorMsg("Amount should be between 3 and 8 decimal digits")
                        return 0
                else:
                    errorMsg("Amount should be decimals only")
                    return 0
            else:
                errorMsg("Account number does not exist")
                return 0
        else:
            return 0
    else:
        errorMsg("Not enough arguments. Please follow the format: deposit accountNumber amount")
        return 0


def withdraw(action):
    print("Withdraw")
    global status
    if status == "atm":
        limit = 200000 #from assignment requirements
    elif status == "agent":
        limit = 99999999 #from assignment requirements
    else:
        return 0
    inputCommand = action.split(" ", 2);
    # Make sure length is 3 to avoid crashes
    if len(inputCommand) == 3:
        accNum = inputCommand[1]
        amount = inputCommand[2]
        if accNumValid(accNum) == 1:
            if accNumExists(accNum) == 1:
                if accNumDecOnly(amount) == True:
                    if len(amount) > 3 and len(amount) < 8:
                        currentAmount, dailyAmount = getAccBalance(accNum)
                        if int(amount) <= min(limit,currentAmount,(500000-dailyAmount)): #check all restrictions
                            try:
                                tsf1 = open("tsf.txt", "a")
                                tsf1.write("WDR " + accNum + " " + amount + " " + "0000000" + " " + "***")
                                tsf1.close()
                                #WILL NEED TO WRITE NEW AMOUNT TO BACKEND AS WELL AS UPDATE THE DAILY
                            except:
                                errorMsg("Something went wrong opening the tsf.txt")
                                return 0
                        else:
                            errorMsg("Amount exceeds the withdrawal limit.")
                            return 0
                    else:
                        errorMsg("Amount should be between 3 and 8 decimal digits")
                        return 0
                else:
                    errorMsg("Amount should be decimals only")
                    return 0
            else:
                errorMsg("Account number does not exist")
                return 0
        else:
            return 0
    else:
        errorMsg("Not enough arguments. Please follow the format: withdraw accountNumber amount")
        return 0


def transfer(action):
    print("hello")

def actionHandler(action):  # Handle action
    global status
    if action == "whereami":
        print("Action Handler")
        return 1
    if status == "logout":
        if action == "login":
            login()
            return 1
        else:
            return 0
    elif status == "login":
        if action == "login":
            return 0
        elif action == "logout":
            logout()
            return 1
        elif action == "atm":
            setatm()
            return 1
        elif action == "agent":
            setagent()
            return 1
        else:
            return 0
    elif status == "atm":
        if action == "logout":
            logout()
            return 1
        elif action == "atm":
            return 0
        elif action == "agent":
            return 0
        elif "createAccount" in action:
            return 0
        elif "deleteAccount" in action:
            return 0
        elif "deposit" in action:
            deposit(action)
            return 1
        elif "withdraw" in action:
            withdraw(action)
            return 1
        elif "transfer" in action:
            transfer(action)
            return 1
        else:
            return 0
    elif status == "agent":
        if action == "logout":
            logout()
            return 1
        elif action == "atm":
            return 0
        elif action == "agent":
            return 0
        elif "createAccount" in action:
            createAccount(action)
            return 1
        elif "deleteAccount" in action:
            deleteAccount(action)
            return 1
        elif "deposit" in action:
            deposit(action)
            return 1
        elif "withdraw" in action:
            withdraw(action)
            return 1
        elif "transfer" in action:
            transfer(action)
            return 1
        else:
            return 0




#val = input("Enter your value: ")
if __name__ == "__main__":
    status = "logout"
    while 1:
        handleKeyboardInput()


#print(val)
